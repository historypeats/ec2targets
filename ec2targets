#!/usr/bin/env python
#
#	Author: historypeats <iam.historypeats@gmail.com>
#	Description: This tool is used to quickly retrieve hostnames, and IP Addresses from EC2 based on Tags
#	Requirements:
#		- boto
#
from time import gmtime, strftime
import boto.ec2
import sys
import re
import argparse


#
# Config
#
REGIONS = [
	'us-east-1', 
	'us-west-2', 
	'us-gov-west-1', 
	'us-west-1',
	'cn-north-1', 
	'ap-northeast-1', 
	'eu-west-1',
	'eu-central-1', 
	'ap-southeast-1', 
	'ap-southeast-2', 
	'sa-east-1'
	]

# AWS creds. If these values are not changed, boto will check your .aws/.boto configs for creds
AWS_ACCESS_KEY_ID = None
AWS_SECRET_ACCESS_KEY = None

# Color Printing Codes
FAIL = '\033[91m'
ENDC = '\033[0m'


#
#	Functions
#
def getInfo(tagKey, tagValue, results):
	conn = None

	for region in REGIONS:
		print '[+] Getting Instances from region {0}'.format(region)
		try:
			conn = boto.ec2.connect_to_region(region, aws_access_key_id=AWS_ACCESS_KEY_ID, aws_secret_access_key=AWS_SECRET_ACCESS_KEY)
			
			if conn:
				# Build list of instances with tag
				instances = list()
				reservations = conn.get_all_instances(filters={'tag:{0}'.format(tagKey) : tagValue})
				if reservations:	
					for reservation in reservations:
						for instance in reservation.instances:
							instances.append(instance)

					for instance in instances:
						id = instance.id
						pubIP = instance.ip_address
						privIP = instance.private_ip_address

						results.append((region, id, pubIP, privIP))

						

			conn.close()
		except:
			print FAIL + '[!] Error connecting to region {0}'.format(region) + ENDC

	return results


def initArgs():
	''' Initialize Argparse '''

	parser = argparse.ArgumentParser(description='Gather EC2 Targets')
	parser.add_argument('tag', help='The tag name', type=str)
	parser.add_argument('value', help='The tag value', type=str)
	parser.add_argument('-o', dest='outfile', help='The output file in CSV format', type=str)

	return parser.parse_args()


#
#	Main
#
def main():
	''' Main '''

	args = initArgs()
	print '[+] Starting task on {0}'.format(strftime("%m-%d-%Y %I:%M%p", gmtime()))
	results = list()
	
	getInfo(args.tag, args.value, results)

	print '\n### Results ###\n'
	
	for result in results:
		print 'Region: {0} - Instance ID: {1} - Public IP: {2} - Private IP: {3}'.format(result[0], result[1], result[2], result[3])

	if args.outfile:
		conn = None
		try:
			with open(args.outfile, 'w') as fd:
				for result in results:
					fd.write('Region, Instance ID, Public IP, Private IP\n')
					fd.write('{0}, {1}, {2}, {3}\n'.format(result[0], result[1], result[2], result[3]))
		except:
			print FAIL + '[!] Error saving results to output file {0}'.format(args.outfile) + ENDC

		finally:
			if conn:
				conn.close()



if __name__ == '__main__':
	main()